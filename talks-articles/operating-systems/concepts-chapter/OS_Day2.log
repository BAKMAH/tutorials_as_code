## Process Management

* Scheduler + Interrupt Handlers + IPC

### Concepts
> MultiProcessing vs MultiThreading
> Timer
> init Supreme Parent for User Space with ID#1

### TimeSharing:
  > => Cooperative MultiTasking/TimeSharing : relies on each process giving up regular time
  > => Preemptive MultiTasking/Timesharing : With interrupts and preemption from O.S.
> * RealTime Systems: waiting tasks are guaranteed CPU time based on linked external event


### Process State Transitions
* new, ready, running, waiting, terminated

### Process Control Block (PCB)
* Process State; Program Counter; CPU Registers; Values of base regiesters, page tables, Accounting Info; I/O Status Info; Thread specific info; Parent and Sibling Process

### Process Scheduling
* Scheduling Queues
  > process starting get added to job queue
  > one waiting for execution and present on main memory are added to ready queue (linked list of PCBs)
  > list of process waiting for particular I/O device are moved to device queue of that device
  > process might create a child and wait for it to exit
  > process could be forcible removed from CPU by an interrupt and place in ready queue

* Schedulers
  [Batch Systems]
  > long-term-sched OR job-sched picks process spooled over disk to be loaded in main memory for execution
  > short-term-sched OR CPU-sched picks process from main memory to be executed currently
  > CPU-sched need to be much faster than Job-sched because of its frequency being much higher which maps to cpu utilization
  > Job-sched need to pick good combo of I/O-bound-proc and CPU-bound-proc for proper resource utilization
  > CPU-sched maps to TimeSharing AND Job-sched maps to MultiProg
  [TimeSharing (long-term-sched is minimal)]
  > mid-term-sched for process swapping (to get better process mix, or free up main-memory on heavy load)
* Context Switches
  > saving/restoring PCB also accounts Idle CPU time

### Threads
> Threads (pre-emptive) vs Fibers (co-operative)
> Thread Pool

### Inter Process Communication (IPC)
##### Shared Memory (common r/w so faster but cache coherency so relatively poor perf)
  > Bounded Buffer and Unbounded Buffer
##### Message Passing (sys-call comm so relatively slow but also maps over distributed system)
  > Direct and Indirect Communication
  > Sync or Async Communication : Blocking/NonBlocking Send; Blocking/NonBlocking Recv
  > Automatic or Explicit Buffering: Zero Buffering; Bounded Capcity and Unbounded Capacity (automatic)

### Communication in Client Server Systems
* Socket : IP:Port
* RPC : abstract procedure call mechanism b/w systems with n/w connections, IPC over n/w with added protocol
* Pipes : one of the basic and initial forms of IPC
  > 4 points to consider: Bidirectional/Unidirectional ; if BiDir then FullDuplex/HalfDuplex ; do they need to be Parent/Child ; can communicate over n/w or just local